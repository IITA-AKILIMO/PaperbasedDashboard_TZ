dff = dropEmpty.join(dropTm,how="right", sort=True)
#print dff
cols = list(dff.columns.values) #Make a list of all of the columns in the df
#print cols
dfo=dff.reindex(['SNM', 'Instrument', 'Scan_date','Time', 'Zone', 'Duration', 'Operator', 'Resolution', 'Zero_filling_Factor', 'Number_points', 'Laser_Wavenumber', 'Wavenumber_one', 'Wavenumber_last', 'Min_absorbance', 'Max_Absorbance'], axis=1)
#print dfo
met=(dfo['SNM']) #pick SNM from Dataframe
#print(met)
df1 = pd.DataFrame(met.str.split(';',2).tolist(),
columns = ['SSN','Lab','Material']) #remove semicolon from SNM dataframe
#print(df1)
dropSNM=dfo.drop(['SNM'], axis=1) #Drop SNM from original dataframe
#print(dropSNM)
jn=df1.join(dropSNM, lsuffix='Instrument', rsuffix='dropSNM') #Join  edited datframe with new columns of snm
# Get absorbances and wavenumbers
AA <- dfo=dff.reindex(['SNM', 'Instrument', 'Scan_date','Time', 'Zone', 'Duration', 'Operator', 'Resolution', 'Zero_filling_Factor', 'Number_points', 'Laser_Wavenumber', 'Wavenumber_one', 'Wavenumber_last', 'Min_absorbance', 'Max_Absorbance'], axis=1)
AA = dfo=dff.reindex(['SNM', 'Instrument', 'Scan_date','Time', 'Zone', 'Duration', 'Operator', 'Resolution', 'Zero_filling_Factor', 'Number_points', 'Laser_Wavenumber', 'Wavenumber_one', 'Wavenumber_last', 'Min_absorbance', 'Max_Absorbance'], axis=1)
AA
met
dfo=dff.reindex(['SNM', 'Instrument', 'Scan_date','Time', 'Zone', 'Duration', 'Operator', 'Resolution', 'Zero_filling_Factor', 'Number_points', 'Laser_Wavenumber', 'Wavenumber_one', 'Wavenumber_last', 'Min_absorbance', 'Max_Absorbance'], axis=1)
#print dfo
####################################Drop SNM####################################
met=(dfo['SNM']) #pick SNM from Dataframe
met
df1 = pd.DataFrame(met.str.split(';',2).tolist(),
df1
print(df1)
df1 = pd.DataFrame(met.str.split(';',2).tolist(),
columns = ['SSN','Lab','Material']) #remove semicolon from SNM dataframe
os.chdir('C:/Users/User/Documents/ACAI/opusfiles/data/80SS')
# Check currect working directory
cwd = os.getcwd()
file_list = glob.glob(cwd + "/*.[0-9]")
# Loop through files in file_list
SNM = []
INS = []
DAT = []
TIM = []
EXP = []
DUR = []
CNM = []
RES = []
ZFF = []
NPT = []
LWN = []
LXV = []
FXV = []
minY = []
maxY = []
# loop through all files
count = 0
for f in file_list:
try:
dbs = opusFC.listContents(f)
for pos, tupl in enumerate(dbs):
if tupl[0] == 'AB':
count += 1
#print(count)
#print(pos)
data = opusFC.getOpusData(f, dbs[pos])
#print(data.parameters)
SNM.append(data.parameters['SNM'])
INS.append(data.parameters['INS'])
DAT.append(data.parameters['DAT'])
TIM.append(data.parameters['TIM'])
DUR.append(data.parameters['DUR'])
CNM.append(data.parameters['CNM'])
RES.append(data.parameters['RES'])
ZFF.append(data.parameters['ZFF'])
NPT.append(data.parameters['NPT'])
LWN.append(data.parameters['LWN'])
FXV.append(data.parameters['FXV'])
LXV.append(data.parameters['LXV'])
minY.append(data.minY)
maxY.append(data.maxY)
continue
except ValueError:
print('Doesnt have AB Block', f)
print('This is non opus', f)
continue
varnames = 'SNM', 'Instrument', 'Scan_date', "Time", "Duration", "Operator", "Resolution", "Zero_filling_Factor", "Number_points", "Laser_Wavenumber", "Wavenumber_one", "Wavenumber_last", "Min_absorbance", "Max_Absorbance"
#DAT = datetime.datetime.strptime(DAT, "%Y-%m-%d")
metadata1 = numpy.vstack((SNM,INS, DAT, TIM, DUR, CNM, RES, ZFF, NPT, LWN, FXV, LXV, minY, maxY)).T
metadata = pd.DataFrame(metadata1, columns=varnames)
############################### DROP TIME #########################################
met = (metadata['Time'])  # pick time
#print met
df = pd.DataFrame(met.str.split("[)(]").tolist())  # remove parenthesis from time column values
renam = df.rename( columns={0: "Time",1: "Zone", 2:"Empty"})
dropEmpty = renam.drop(['Empty'], axis=1)
#print dropEmpty
dropTm = metadata.drop(['Time'], axis=1)
#print dropTm
dff = dropEmpty.join(dropTm,how="right", sort=True)
#print dff
cols = list(dff.columns.values) #Make a list of all of the columns in the df
#print cols
dfo=dff.reindex(['SNM', 'Instrument', 'Scan_date','Time', 'Zone', 'Duration', 'Operator', 'Resolution', 'Zero_filling_Factor', 'Number_points', 'Laser_Wavenumber', 'Wavenumber_one', 'Wavenumber_last', 'Min_absorbance', 'Max_Absorbance'], axis=1)
#print dfo
####################################Drop SNM####################################
met=(dfo['SNM']) #pick SNM from Dataframe
#print(met)
df1 = pd.DataFrame(met.str.split(';',2).tolist(),
columns = ['SSN','Lab','Material']) #remove semicolon from SNM dataframe
#print(df1)
dfo
cols
dfo
os.chdir('C:/Users/User/Documents/ACAI/opusfiles/data/ACAI Project 2016')
# Check currect working directory
cwd = os.getcwd()
file_list = glob.glob(cwd + "/*.[0-9]")
# Loop through files in file_list
SNM = []
INS = []
DAT = []
TIM = []
EXP = []
DUR = []
CNM = []
RES = []
ZFF = []
NPT = []
LWN = []
LXV = []
FXV = []
minY = []
maxY = []
# loop through all files
count = 0
for f in file_list:
try:
dbs = opusFC.listContents(f)
for pos, tupl in enumerate(dbs):
if tupl[0] == 'AB':
count += 1
#print(count)
#print(pos)
data = opusFC.getOpusData(f, dbs[pos])
#print(data.parameters)
SNM.append(data.parameters['SNM'])
INS.append(data.parameters['INS'])
DAT.append(data.parameters['DAT'])
TIM.append(data.parameters['TIM'])
DUR.append(data.parameters['DUR'])
CNM.append(data.parameters['CNM'])
RES.append(data.parameters['RES'])
ZFF.append(data.parameters['ZFF'])
NPT.append(data.parameters['NPT'])
LWN.append(data.parameters['LWN'])
FXV.append(data.parameters['FXV'])
LXV.append(data.parameters['LXV'])
minY.append(data.minY)
maxY.append(data.maxY)
continue
except ValueError:
print('Doesnt have AB Block', f)
print('This is non opus', f)
continue
varnames = 'SNM', 'Instrument', 'Scan_date', "Time", "Duration", "Operator", "Resolution", "Zero_filling_Factor", "Number_points", "Laser_Wavenumber", "Wavenumber_one", "Wavenumber_last", "Min_absorbance", "Max_Absorbance"
#DAT = datetime.datetime.strptime(DAT, "%Y-%m-%d")
metadata1 = numpy.vstack((SNM,INS, DAT, TIM, DUR, CNM, RES, ZFF, NPT, LWN, FXV, LXV, minY, maxY)).T
metadata = pd.DataFrame(metadata1, columns=varnames)
############################### DROP TIME #########################################
met = (metadata['Time'])  # pick time
#print met
df = pd.DataFrame(met.str.split("[)(]").tolist())  # remove parenthesis from time column values
renam = df.rename( columns={0: "Time",1: "Zone", 2:"Empty"})
dropEmpty = renam.drop(['Empty'], axis=1)
#print dropEmpty
dropTm = metadata.drop(['Time'], axis=1)
#print dropTm
dff = dropEmpty.join(dropTm,how="right", sort=True)
#print dff
cols = list(dff.columns.values) #Make a list of all of the columns in the df
#print cols
dfo=dff.reindex(['SNM', 'Instrument', 'Scan_date','Time', 'Zone', 'Duration', 'Operator', 'Resolution', 'Zero_filling_Factor', 'Number_points', 'Laser_Wavenumber', 'Wavenumber_one', 'Wavenumber_last', 'Min_absorbance', 'Max_Absorbance'], axis=1)
dfo
dfo
df1
import re
shiny::runApp('ACAI/DASHBOARDS/paper based/PaperbasedDashboard_TZ - Copy')
runApp('ACAI/DASHBOARDS/paper based/PaperbasedDashboard_TZ - Copy')
runApp('ACAI/DASHBOARDS/paper based/PaperbasedDashboard_TZ - Copy')
runApp('ACAI/DASHBOARDS/paper based/PaperbasedDashboard_TZ - Copy')
runApp('ACAI/DASHBOARDS/paper based/PaperbasedDashboard_TZ - Copy')
setwd("C:/Users/User/Documents/ACAI/DASHBOARDS/paper based/PaperbasedDashboard_TZ")
runApp()
setwd("C:/Users/User/Documents/ACAI/DASHBOARDS/paper based/PaperbasedDashboard_TZ - Copy")
runApp()
runApp()
runApp()
runApp()
runApp()
boundaryTZ <- readOGR(dsn=getwd(), layer="gadm36_TZA_1")
tzRegion <- readOGR(dsn=getwd(), layer="gadm36_TZA_2")
###########################################################################
##  TZ fertilizer recom for FCY 1:5
###########################################################################
FR_TZ_FCY1 <- readRDS("FRrecom_lga_level1_TZ_2020.RDS")
FR_TZ_FCY2 <- readRDS("FRrecom_lga_level2_TZ_2020.RDS")
FR_TZ_FCY3 <- readRDS("FRrecom_lga_level3_TZ_2020.RDS")
FR_TZ_FCY4 <- readRDS("FRrecom_lga_level4_TZ_2020.RDS")
FR_TZ_FCY5 <- readRDS("FRrecom_lga_level5_TZ_2020.RDS")
###########################################################################
##  adding planting month
###########################################################################
addplm <- function(ds, country){
ds$respY <- ds$TargetY - ds$CurrentY
ds$groRev <- ds$NR + ds$TC
ds$plm <- as.factor(ds$plw)
levels(ds$plm)[levels(ds$plm) %in% 1:4]   <- "January"
levels(ds$plm)[levels(ds$plm) %in% 5:8]   <- "February"
levels(ds$plm)[levels(ds$plm) %in% 9:13]  <- "March"
levels(ds$plm)[levels(ds$plm) %in% 14:17] <- "April"
levels(ds$plm)[levels(ds$plm) %in% 18:22] <- "May"
levels(ds$plm)[levels(ds$plm) %in% 23:26] <- "June"
levels(ds$plm)[levels(ds$plm) %in% 27:30] <- "July"
levels(ds$plm)[levels(ds$plm) %in% 31:35] <- "August"
levels(ds$plm)[levels(ds$plm) %in% 36:39] <- "September"
levels(ds$plm)[levels(ds$plm) %in% 40:43] <- "October"
levels(ds$plm)[levels(ds$plm) %in% 44:48] <- "November"
levels(ds$plm)[levels(ds$plm) %in% 49:53] <- "December"
ds$rateUrea <- ds$urea
ds$rateNPK171717 <- ds$NPK17_17_17
ds$rateDAP <- ds$DAP
return(ds)
}
FR_TZ_FCY1_plm <- addplm(ds=FR_TZ_FCY1, country = "TZ") ## TZ if user current yield is level 1
FR_TZ_FCY2_plm <- addplm(ds=FR_TZ_FCY2, country = "TZ") ## TZ if user current yield is level 2
FR_TZ_FCY3_plm <- addplm(ds=FR_TZ_FCY3, country = "TZ") ## TZ if user current yield is level 3
FR_TZ_FCY4_plm <- addplm(ds=FR_TZ_FCY4, country = "TZ") ## TZ if user current yield is level 4
FR_TZ_FCY5_plm <- addplm(ds=FR_TZ_FCY5, country = "TZ") ## TZ if user current yield is level 5
###########################################################################
## select FCY and read the corresponding file
## NG: Subsetting for the user defined Region and selecting a coordinate to put the state name in the map
################################################################
unit = 'hectare'
if(unit == 'hectare'){
yield_level <- ifelse( FCY_ha == "0-7.5 t/hectare", "a low yield level",
ifelse( FCY_ha == "7.5-15 t/hectare","a normal yield level",
ifelse( FCY_ha == "15-22.5 t/hectare","a medium yield level",
ifelse( FCY_ha == "22.5-30 t/hectare","a high yield level",
ifelse( FCY_ha == ">30 t/hectare","a very high yield level"
)))))
}else if(unit == 'acre'){
yield_level <- ifelse( FCY_acre == "0-3 t/acre","a low yield level",
ifelse( FCY_acre == "3-6 t/acre","a normal yield level",
ifelse( FCY_acre == "6-9 t/acre","a medium yield level",
ifelse( FCY_acre == "9-12 t/acre","a high yield level",
ifelse( FCY_acre == ">12 t/acre","a very high yield level")
))))
}
FCY_ha = "0-7.5 t/hectare"
yield_level <- ifelse( FCY_ha == "0-7.5 t/hectare", "a low yield level",
ifelse( FCY_ha == "7.5-15 t/hectare","a normal yield level",
ifelse( FCY_ha == "15-22.5 t/hectare","a medium yield level",
ifelse( FCY_ha == "22.5-30 t/hectare","a high yield level",
ifelse( FCY_ha == ">30 t/hectare","a very high yield level"
)))))
if(unit == 'hectare'){
yield_level <- ifelse( FCY_ha == "0-7.5 t/hectare", "a low yield level",
ifelse( FCY_ha == "7.5-15 t/hectare","a normal yield level",
ifelse( FCY_ha == "15-22.5 t/hectare","a medium yield level",
ifelse( FCY_ha == "22.5-30 t/hectare","a high yield level",
ifelse( FCY_ha == ">30 t/hectare","a very high yield level"
)))))
}else if(unit == 'acre'){
yield_level <- ifelse( FCY_acre == "0-3 t/acre","a low yield level",
ifelse( FCY_acre == "3-6 t/acre","a normal yield level",
ifelse( FCY_acre == "6-9 t/acre","a medium yield level",
ifelse( FCY_acre == "9-12 t/acre","a high yield level",
ifelse( FCY_acre == ">12 t/acre","a very high yield level")
))))
}
print(yield_level)
lgaGroups <- "Kigoma"
lgaGroups2 <- "Kigoma"
#define the yield category
if (unit == "hectare"){
FCY <- FCY_ha
if(FCY == "7.5-15 t/hectare" ){
ds <- FR_TZ_FCY2_plm
}else if(FCY == "0-7.5 t/hectare" ){
ds <- FR_TZ_FCY1_plm
}else if(FCY == "15-22.5 t/hectare" ){
ds <- FR_TZ_FCY3_plm
}else if(FCY == "22.5-30 t/hectare"){
ds <- FR_TZ_FCY4_plm
}else if(FCY == ">30 t/hectare" ){
ds <- FR_TZ_FCY5_plm
}
}else if(unit == "acre"){
FCY <- FCY_acre
if(FCY == "3-6 t/acre" ){
ds <- FR_TZ_FCY2_plm
}else if(FCY == "0-3 t/acre" ){
ds <- FR_TZ_FCY1_plm
}else if(FCY == "6-9 t/acre" ){
ds <- FR_TZ_FCY3_plm
}else if(FCY == "9-12 t/acre" ){
ds <- FR_TZ_FCY4_plm
}else if(FCY == ">12 t/acre" ){
ds <- FR_TZ_FCY5_plm
}
}
ds
#subset dataset by regions
Mara <- droplevels(ds[ds$REGION %in% c("Mara"), ])
Simiyu <- droplevels(ds[ds$REGION %in% c("Simiyu"), ])
Maralabel <- data.frame(REGION= c("Mara"), lon=c(34.7), lat=c(-1.2))
Simiyulabel <- data.frame(REGION= c("Simiyu"), lon=c(33.7), lat=c( -3.7))
Kagera <- droplevels(ds[ds$REGION %in% c("Kagera"), ])
Geita <- droplevels(ds[ds$REGION %in% c("Geita"), ])
Kigoma <- droplevels(ds[ds$REGION %in% c("Kigoma"), ])
Kageralabel <- data.frame(REGION= c("Kagera"), lon=c(30.25), lat=c(-2.1))
Geitalabel <- data.frame(REGION= c("Geita"), lon=c( 32.4), lat=c(-4))
Kigomalabel <- data.frame(REGION= c("Kigoma"), lon=c(31), lat=c(-6.1))
Mwanza <- droplevels(ds[ds$REGION %in% c("Mwanza"), ])
Shinyanga <- droplevels(ds[ds$REGION %in% c("Shinyanga"), ])
Mwanzalabel <- data.frame(REGION= c("Mwanza"), lon=c(33.65), lat=c(-2.1))
Shinyangalabel <- data.frame(REGION= c("Shinyanga"), lon=c(33.2), lat=c(-4.1))
Tanga <- droplevels(ds[ds$REGION %in% c("Tanga"), ])
Pwani <- droplevels(ds[ds$REGION %in% c("Pwani"), ])
Tangalabel <- data.frame(REGION= c("Tanga"), lon=c(37.6), lat=c(-4.8))
Pwanilabel <- data.frame(REGION= c("Pwani"), lon=c(37.9), lat=c(-7.3))
Mtwara <- droplevels(ds[ds$REGION %in% c("Mtwara"), ])
Lindi <- droplevels(ds[ds$REGION %in% c("Lindi"), ])
Mtwaralabel <- data.frame(REGION= c("Mtwara"), lon=c(37.5), lat=c(-11.2))
Lindilabel <- data.frame(REGION= c("Lindi"), lon=c(338.7), lat=c(-8.1))
Zanzibar <- droplevels(ds[ds$REGION %in% c("Zanzibar South and Central", "Zanzibar West", "Zanzibar North"), ])
Zanzibarlabel <- data.frame(REGION= c("Zanzibar"), lon=c(39.5), lat=c(-5.95))
Maracity <- data.frame(REGION = c("Mara", "Simiyu"),name=c("Musoma","Bariadi"), lat=c(-1.5,-2.8), lon = c(33.8, 33.98))
Kageracity <- data.frame(REGION = c("Kagera", "Geita", "Kigoma"), name=c("Bukoba","Geita","Kigoma"),
lat=c(-1.33, -2.87, -4.88), lon = c(31.82, 32.23,29.63))
Pwaniacity <- data.frame(REGION = c("Pwani", "Tanga"),name=c("Kibaha","Tanga"),
lat=c(-6.77, -5.07), lon = c(38.92, 39.01))
Mwanzacity <- data.frame(REGION = c("Mwanza", "Shinyanga"),name=c("Mwanza", "Shinyanga"),
lat=c(-2.52, -3.66), lon = c(32.9, 33.42))
Mtwaraacity <- data.frame(REGION = c("Mtwara","Lindi"),name=c("Mtwara","Lindi"),
lat=c(-10.27, -9.99), lon = c(40.18, 39.71))
Zanzibarcity <- data.frame(REGION = "Zanzibar",name="Zanzibar", lat=-6.17, lon = 39.2)
if(lgaGroups =="Mtwara"){
LGApoints <- Mtwara
stateLabel <- Mtwaralabel
textangle<-0
cities = Mtwaraacity
couple <- "Two"
}else if(lgaGroups =="Lindi"){
LGApoints <- Lindi
stateLabel <- Lindilabel
textangle<-0
cities = Mtwaraacity
couple <- "Two"
}else if(lgaGroups =="Pwani"){
LGApoints <- Pwani
stateLabel <- Pwanilabel
textangle<-0
cities = Pwaniacity
couple <- "Two"
}else if(lgaGroups =="Tanga"){
LGApoints <- Tanga
stateLabel <- Tangalabel
textangle<-0
cities = Pwaniacity
couple <- "Two"
}else if(lgaGroups =="Mwanza"){
LGApoints <- Mwanza
stateLabel <- Mwanzalabel
textangle<-0
cities = Mwanzacity
couple <- "Two"
}else if(lgaGroups =="Shinyanga"){
LGApoints <- Shinyanga
stateLabel <- Shinyangalabel
textangle<-0
cities = Mwanzacity
couple <- "Two"
}else if(lgaGroups =="Mara"){
LGApoints <- Mara
stateLabel <- Maralabel
textangle<-0
cities = Maracity
couple <- "Two"
}else if(lgaGroups =="Simiyu"){
LGApoints <- Simiyu
stateLabel <- Simiyulabel
textangle<-0
cities = Maracity
couple <- "Two"
}else if(lgaGroups =="Kagera"){
LGApoints <- Kagera
stateLabel <- Kageralabel
textangle<-0
cities = Kageracity
couple <- "Two"
}else if(lgaGroups =="Geita"){
LGApoints <- Geita
stateLabel <- Geitalabel
textangle<-0
cities = Kageracity
couple <- "Two"
}else if(lgaGroups =="Kigoma"){
LGApoints <- Kigoma
stateLabel <- Kigomalabel
textangle<-0
cities = Kageracity
couple <- "Two"
}else if(lgaGroups ==c("Zanzibar South and Central")){
LGApoints <- Mwanza
stateLabel <- Mwanzalabel
textangle<-0
cities = Zanzibarcity
couple <- "Two"
}else if(lgaGroups ==c("Zanzibar West")){
LGApoints <- Mwanza
stateLabel <- Mwanzalabel
textangle<-0
cities = Zanzibarcity
couple <- "Two"
}else if(lgaGroups ==c("Zanzibar North")){
LGApoints <- Mwanza
stateLabel <- Mwanzalabel
textangle<-0
cities = Zanzibarcity
couple <- "Two"
}
cities
lgaGroups
LGApoints
stateLabel
cities
plotData <- droplevels(LGApoints[LGApoints$plm == plantMonth, ])
if(couple == "Two"){
lgaGroups <- c(strsplit(lgaGroups, "_")[[1]][1], strsplit(lgaGroups, "_")[[1]][2])
}
if(couple == "Three"){
lgaGroups <- c(strsplit(lgaGroups, "_")[[1]][1], strsplit(lgaGroups, "_")[[1]][2], strsplit(lgaGroups, "_")[[1]][3])
}
plotData <- droplevels(plotData[plotData$REGION %in% lgaGroups, ])
AOI <- lgaGroups
AOIMapS <- subset(boundaryTZ, NAME_1 %in% AOI )
AOIMap <- subset(tzRegion, NAME_1 %in% AOI )
AOIMap <- AOIMap[,c("NAME_1", "NAME_2")]
LGAnames <- as.data.frame(AOIMap)
LGAnames <- cbind(LGAnames, coordinates(AOIMap))
colnames(LGAnames) <- c("REGION","DISTRICT","long","lat"  )
crop_ngstate <- subset(tzRegion, NAME_1 %in% AOI )
plantMonth <- "January"
plotData <- droplevels(LGApoints[LGApoints$plm == plantMonth, ])
if(couple == "Two"){
lgaGroups <- c(strsplit(lgaGroups, "_")[[1]][1], strsplit(lgaGroups, "_")[[1]][2])
}
if(couple == "Three"){
lgaGroups <- c(strsplit(lgaGroups, "_")[[1]][1], strsplit(lgaGroups, "_")[[1]][2], strsplit(lgaGroups, "_")[[1]][3])
}
plotData <- droplevels(plotData[plotData$REGION %in% lgaGroups, ])
AOI <- lgaGroups
AOIMapS <- subset(boundaryTZ, NAME_1 %in% AOI )
AOIMap <- subset(tzRegion, NAME_1 %in% AOI )
AOIMap <- AOIMap[,c("NAME_1", "NAME_2")]
LGAnames <- as.data.frame(AOIMap)
LGAnames <- cbind(LGAnames, coordinates(AOIMap))
colnames(LGAnames) <- c("REGION","DISTRICT","long","lat"  )
crop_ngstate <- subset(tzRegion, NAME_1 %in% AOI )
## take REGION average
LGAaverage <- ddply(plotData, .(DISTRICT, REGION), summarize,
LGAUrea = round(mean(rateUrea), digits=0),
LGANPK171717 = round(mean(rateNPK171717), digits=0),
LGADAP = round(mean(rateDAP), digits=0),
LGAdY = round(mean(respY), digits=0))
dss <- LGAaverage
dss$LGAUrea <- dss$LGAUrea / 2.47105
dss$LGANPK171717 <- dss$LGANPK171717 / 2.47105
dss$LGADAP <- dss$LGADAP / 2.47105
dss$LGAdY <- dss$LGAdY / 2.47105
if(unit == 'acre'){
LGAaverage <- dss
}
plotData <- merge(plotData, LGAaverage, by=c("DISTRICT", "REGION"))
if(unit == "ha"){
plotData$Urea <- round(plotData$LGAUrea/25)*25
plotData$NPK17_17_17 <- round(plotData$LGANPK171717/50)*50
plotData$DAP <- round(plotData$LGADAP/25)*25
plotData$dY <- round(plotData$LGAdY/2)*2
}else{
plotData$Urea <- round(plotData$LGAUrea/10)*10
plotData$NPK17_17_17 <- round(plotData$LGANPK171717/20)*20
plotData$DAP <- round(plotData$LGADAP/10)*10
plotData$dY <- round(plotData$LGAdY/1)*1
}
fileNameCsv <- paste("tables", ".csv", sep="")
AOIMap2 <- merge(AOIMap, unique(plotData[, c("REGION","DISTRICT", "Urea", "NPK17_17_17","DAP","dY", "LGAdY")]),
by.x=c("NAME_1","NAME_2") ,by.y=c("REGION","DISTRICT"))
AOIMap2$month <- plantMonth
AOIMap2 <- AOIMap2[!is.na(AOIMap2$Urea), ]
plotData$month <- plantMonth
Currency <- "TZS"
tt_tz <- unique(as.data.frame(plotData[, c("REGION","DISTRICT", "Urea", "NPK17_17_17","DAP", "LGAdY", "month")]))
tt_tz$LGAdY <- round(tt_tz$LGAdY, digits = 1)
tt_tz2 <- dplyr::select(tt_tz, c(REGION, DISTRICT, Urea, NPK17_17_17, DAP, LGAdY))
colnames(tt_tz2) <- c("Region","DISTRICT", "Urea (kg/ha)", "NPK 17:17:17 (kg/ha)", "DAP kg/ha", "Expected yield response (t))"
)
tt_tz2
df_tt2 <- data.frame(UreaPrice=5000,NPK171717Price=6000,CassavaPrice=2000,DAPPrice=2000,
REGION=lgaGroups)
df_tt2
runApp()
runApp()
runApp()
runApp()
runApp()
